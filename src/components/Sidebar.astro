---
type ItemList = {
  mainPart: Item;
  subParts: Item[];
};
type Item = {
  title: string;
  id: string;
};

export interface Props {
  items: ItemList[];
}
const { items } = Astro.props as Props;
---

<div class="sidebar">
  <div class="toc">
    <ul>
      {
        items.map((item) => (
          <li>
            <a href={`#${item.mainPart.id}`}>{item.mainPart.title}</a>
            <ul>
              {item.subParts.map((subPart) => (
                <li>
                  <a href={`#${subPart.id}`}>{subPart.title}</a>
                </li>
              ))}
            </ul>
          </li>
        ))
      }
      <svg
        class="toc-marker"
        width="200"
        height="200"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          stroke="#e63946"
          stroke-width="3"
          fill="transparent"
          stroke-dasharray="0, 0, 0, 1000"
          stroke-linecap="round"
          stroke-linejoin="round"
          transform="translate(-0.5, -0.5)"></path>
      </svg>
    </ul>
  </div>
</div>

<style lang="scss">
  .sidebar {
    position: relative;
    width: 17em;
    height: 100%;
    font-family: var(--main-font-medium);
    font-size: 1rem;
    line-height: 2;
  }

  .toc {
    position: fixed;
    padding: 1em;

    ul {
      list-style: none;
      padding: 0;
      margin: 0;
    }

    ul ul {
      padding-left: 1.5em;
    }

    li a {
      display: inline-block;
      color: #aaa;
      text-decoration: none;
      transition: all 0.3s cubic-bezier(0.23, 1, 0.32, 1);
      word-wrap: break-word;
      max-width: 15em;
    }

    li ul li a {
      max-width: 13.5em;
    }
    li a:hover {
      opacity: 75%;
    }
    li.visible > a {
      color: #111;
      transform: translate(5px);
    }
  }

  .toc-marker {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
    path {
      transition: all 0.3s ease;
    }
  }
  @media (max-width: 992px) {
    .sidebar {
      display: none;
    }
  }
</style>

<script>
  var toc = document.querySelector(".toc");
  var marker: SVGPathElement = document.querySelector(".toc-marker path");
  var items;

  // Factor of screen size that the element must cross
  // before it's considered visible
  var TOP_MARGIN = 0.1,
    BOTTOM_MARGIN = 0.2;

  var pathLength;
  var lastPathStart, lastPathEnd;

  window.addEventListener("resize", drawPath, false);
  window.addEventListener("scroll", sync, false);

  drawPath();

  function drawPath() {
    items = [].slice.call(toc.querySelectorAll("li"));

    // Cache element references and measurements
    items = items.map(function (item) {
      var anchor = item.querySelector("a");
      var target = document.getElementById(
        anchor.getAttribute("href").slice(1)
      );

      return {
        listItem: item,
        anchor: anchor,
        target: target,
      };
    });

    // Remove missing targets
    items = items.filter(function (item) {
      return !!item.target;
    });

    var path = [];
    var pathIndent;

    items.forEach(function (item, i) {
      var x = item.anchor.offsetLeft - 5,
        y = item.anchor.offsetTop,
        height = item.anchor.offsetHeight;

      if (i === 0) {
        path.push("M", x, y, "L", x, y + height);
        item.pathStart = 0;
      } else {
        // Draw an additional line when there's a change in
        // indent levels
        if (pathIndent !== x) path.push("L", pathIndent, y);

        path.push("L", x, y);

        // Set the current path so that we can measure it
        marker.setAttribute("d", path.join(" "));
        item.pathStart = marker.getTotalLength() || 0;

        path.push("L", x, y + height);
      }

      pathIndent = x;

      marker.setAttribute("d", path.join(" "));
      item.pathEnd = marker.getTotalLength();
    });

    pathLength = marker.getTotalLength();

    sync();
  }

  function sync() {
    var windowHeight = window.innerHeight;

    var pathStart = pathLength,
      pathEnd = 0;

    var visibleItems = 0;

    items.forEach(function (item) {
      var targetBounds = item.target.getBoundingClientRect();

      if (
        targetBounds.bottom > windowHeight * TOP_MARGIN &&
        targetBounds.top < windowHeight * (1 - BOTTOM_MARGIN)
      ) {
        pathStart = Math.min(item.pathStart, pathStart);
        pathEnd = Math.max(item.pathEnd, pathEnd);

        visibleItems += 1;

        item.listItem.classList.add("visible");
      } else {
        item.listItem.classList.remove("visible");
      }
    });

    // Specify the visible path or hide the path altogether
    // if there are no visible items
    if (visibleItems > 0 && pathStart < pathEnd) {
      if (pathStart !== lastPathStart || pathEnd !== lastPathEnd) {
        marker.setAttribute("stroke-dashoffset", "1");
        marker.setAttribute(
          "stroke-dasharray",
          "1, " + pathStart + ", " + (pathEnd - pathStart) + ", " + pathLength
        );
        marker.setAttribute("opacity", "1");
      }
    } else {
      marker.setAttribute("opacity", "0");
    }

    lastPathStart = pathStart;
    lastPathEnd = pathEnd;
  }
</script>
